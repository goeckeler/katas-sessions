require 'guard/guard'
require 'guard/notifier'

module ::Guard
  class Jasminenode < ::Guard::Guard

    def initialize(watchers = [], options = {})
      super
      @options = {
        :all_on_start => true,
      }.merge(options)
    end

    def start
      UI.info "jasmine-node guard is running."
      run_all if @options[:all_on_start]
    end

    def run_all
      jasmineOutput = runJasmine 'spec'
      notifyAboutJasmineOutput jasmineOutput
    end

    def run_on_change(paths)
      run_all
    end

  private

    def runJasmine(specsToRun)
      jasmineCommand = "#{jasmineNodePath} --coffee #{specsToRun} 2>&1"
      pipe = IO.popen(jasmineCommand)
      lines = []
      while line = pipe.gets
        UI.info line.strip
        lines << line
      end
      lines.join
    end

    def jasmineNodePath
      localInstall = 'node_modules/jasmine-node/bin/jasmine-node'
      return localInstall if File.exists? localInstall
      'jasmine-node'
    end

    def notifyAboutJasmineOutput(jasmineOutput)
      if /(\d+) tests, (\d+) assertions, (\d+) failures/ =~ jasmineOutput
        tests = $1.to_i
        assertions = $2.to_i
        failures = $3.to_i
        notifyAboutJasmineResults(tests, assertions, failures)
      elsif /Error: (.*)/ =~ jasmineOutput
        notify "Error: #{$1}", :failed
      else
        notify "Could not parse results!", :failed
      end
    end

    def notifyAboutJasmineResults(tests, assertions, failures)
        message = "#{tests} tests, #{assertions} assertions, #{failures} failures"
        notify message, image(failures)
    end 

    def priority(image)
      { :failed => 2,
        :pending => -1,
        :success => -2
      }[image]
    end

    def notify(message, image)
      Notifier.notify(message, :title => "Jasmine results", :image => image, :priority => priority(image))
    end

    def image(failures) 
      if failures > 0
        :failed
      else
        :success
      end
    end

  end
end

guard 'jasmine-node' do
  watch /\.coffee$/
  watch /\.js$/
end

